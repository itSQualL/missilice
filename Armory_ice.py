# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `Armory.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Armory
_M_Armory = Ice.openModule('Armory')
__name__ = 'Armory'

_M_Armory._t_PanTilt = IcePy.defineValue('::Armory::PanTilt', Ice.Value, -1, (), False, True, None, ())

if 'PanTiltPrx' not in _M_Armory.__dict__:
    _M_Armory.PanTiltPrx = Ice.createTempClass()
    class PanTiltPrx(Ice.ObjectPrx):

        def down(self, context=None):
            return _M_Armory.PanTilt._op_down.invoke(self, ((), context))

        def downAsync(self, context=None):
            return _M_Armory.PanTilt._op_down.invokeAsync(self, ((), context))

        def begin_down(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Armory.PanTilt._op_down.begin(self, ((), _response, _ex, _sent, context))

        def end_down(self, _r):
            return _M_Armory.PanTilt._op_down.end(self, _r)

        def up(self, context=None):
            return _M_Armory.PanTilt._op_up.invoke(self, ((), context))

        def upAsync(self, context=None):
            return _M_Armory.PanTilt._op_up.invokeAsync(self, ((), context))

        def begin_up(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Armory.PanTilt._op_up.begin(self, ((), _response, _ex, _sent, context))

        def end_up(self, _r):
            return _M_Armory.PanTilt._op_up.end(self, _r)

        def left(self, context=None):
            return _M_Armory.PanTilt._op_left.invoke(self, ((), context))

        def leftAsync(self, context=None):
            return _M_Armory.PanTilt._op_left.invokeAsync(self, ((), context))

        def begin_left(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Armory.PanTilt._op_left.begin(self, ((), _response, _ex, _sent, context))

        def end_left(self, _r):
            return _M_Armory.PanTilt._op_left.end(self, _r)

        def right(self, context=None):
            return _M_Armory.PanTilt._op_right.invoke(self, ((), context))

        def rightAsync(self, context=None):
            return _M_Armory.PanTilt._op_right.invokeAsync(self, ((), context))

        def begin_right(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Armory.PanTilt._op_right.begin(self, ((), _response, _ex, _sent, context))

        def end_right(self, _r):
            return _M_Armory.PanTilt._op_right.end(self, _r)

        def stop(self, context=None):
            return _M_Armory.PanTilt._op_stop.invoke(self, ((), context))

        def stopAsync(self, context=None):
            return _M_Armory.PanTilt._op_stop.invokeAsync(self, ((), context))

        def begin_stop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Armory.PanTilt._op_stop.begin(self, ((), _response, _ex, _sent, context))

        def end_stop(self, _r):
            return _M_Armory.PanTilt._op_stop.end(self, _r)

        def fire(self, context=None):
            return _M_Armory.PanTilt._op_fire.invoke(self, ((), context))

        def fireAsync(self, context=None):
            return _M_Armory.PanTilt._op_fire.invokeAsync(self, ((), context))

        def begin_fire(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Armory.PanTilt._op_fire.begin(self, ((), _response, _ex, _sent, context))

        def end_fire(self, _r):
            return _M_Armory.PanTilt._op_fire.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Armory.PanTiltPrx.ice_checkedCast(proxy, '::Armory::PanTilt', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Armory.PanTiltPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Armory::PanTilt'
    _M_Armory._t_PanTiltPrx = IcePy.defineProxy('::Armory::PanTilt', PanTiltPrx)

    _M_Armory.PanTiltPrx = PanTiltPrx
    del PanTiltPrx

    _M_Armory.PanTilt = Ice.createTempClass()
    class PanTilt(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Armory::PanTilt', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Armory::PanTilt'

        @staticmethod
        def ice_staticId():
            return '::Armory::PanTilt'

        def down(self, current=None):
            raise NotImplementedError("servant method 'down' not implemented")

        def up(self, current=None):
            raise NotImplementedError("servant method 'up' not implemented")

        def left(self, current=None):
            raise NotImplementedError("servant method 'left' not implemented")

        def right(self, current=None):
            raise NotImplementedError("servant method 'right' not implemented")

        def stop(self, current=None):
            raise NotImplementedError("servant method 'stop' not implemented")

        def fire(self, current=None):
            raise NotImplementedError("servant method 'fire' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Armory._t_PanTiltDisp)

        __repr__ = __str__

    _M_Armory._t_PanTiltDisp = IcePy.defineClass('::Armory::PanTilt', PanTilt, (), None, ())
    PanTilt._ice_type = _M_Armory._t_PanTiltDisp

    PanTilt._op_down = IcePy.Operation('down', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    PanTilt._op_up = IcePy.Operation('up', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    PanTilt._op_left = IcePy.Operation('left', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    PanTilt._op_right = IcePy.Operation('right', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    PanTilt._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    PanTilt._op_fire = IcePy.Operation('fire', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Armory.PanTilt = PanTilt
    del PanTilt

# End of module Armory
